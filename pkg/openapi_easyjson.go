// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openapi

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg(in *jlexer.Lexer, out *OpenAPIServer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg(out *jwriter.Writer, in OpenAPIServer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenAPIServer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenAPIServer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenAPIServer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenAPIServer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg(l, v)
}
func easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg1(in *jlexer.Lexer, out *OpenAPISchema) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "required":
			if in.IsNull() {
				in.Skip()
				out.Required = nil
			} else {
				in.Delim('[')
				if out.Required == nil {
					if !in.IsDelim(']') {
						out.Required = make([]string, 0, 4)
					} else {
						out.Required = []string{}
					}
				} else {
					out.Required = (out.Required)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Required = append(out.Required, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg1(out *jwriter.Writer, in OpenAPISchema) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"required\":"
		out.RawString(prefix)
		if in.Required == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Required {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenAPISchema) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenAPISchema) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenAPISchema) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenAPISchema) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg1(l, v)
}
func easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg2(in *jlexer.Lexer, out *OpenAPIResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg2(out *jwriter.Writer, in OpenAPIResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenAPIResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenAPIResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenAPIResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenAPIResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg2(l, v)
}
func easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg3(in *jlexer.Lexer, out *OpenAPIPath) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "get":
			(out.Get).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg3(out *jwriter.Writer, in OpenAPIPath) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"get\":"
		out.RawString(prefix[1:])
		(in.Get).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenAPIPath) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenAPIPath) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenAPIPath) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenAPIPath) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg3(l, v)
}
func easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg4(in *jlexer.Lexer, out *OpenAPIParameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg4(out *jwriter.Writer, in OpenAPIParameter) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenAPIParameter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenAPIParameter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenAPIParameter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenAPIParameter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg4(l, v)
}
func easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg5(in *jlexer.Lexer, out *OpenAPIOperation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Tags = append(out.Tags, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "summary":
			out.Summary = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]OpenAPIParameter, 0, 1)
					} else {
						out.Parameters = []OpenAPIParameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v5 OpenAPIParameter
					(v5).UnmarshalEasyJSON(in)
					out.Parameters = append(out.Parameters, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "responses":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Responses = make(map[string]OpenAPIResponse)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 OpenAPIResponse
					(v6).UnmarshalEasyJSON(in)
					(out.Responses)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg5(out *jwriter.Writer, in OpenAPIOperation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix[1:])
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Tags {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"summary\":"
		out.RawString(prefix)
		out.String(string(in.Summary))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"parameters\":"
		out.RawString(prefix)
		if in.Parameters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Parameters {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"responses\":"
		out.RawString(prefix)
		if in.Responses == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Responses {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				(v11Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenAPIOperation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenAPIOperation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenAPIOperation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenAPIOperation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg5(l, v)
}
func easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg6(in *jlexer.Lexer, out *OpenAPIInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg6(out *jwriter.Writer, in OpenAPIInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenAPIInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenAPIInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenAPIInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenAPIInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg6(l, v)
}
func easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg7(in *jlexer.Lexer, out *OpenAPIComponent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "schemas":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Schemas = make(map[string]OpenAPISchema)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 OpenAPISchema
					(v12).UnmarshalEasyJSON(in)
					(out.Schemas)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg7(out *jwriter.Writer, in OpenAPIComponent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"schemas\":"
		out.RawString(prefix[1:])
		if in.Schemas == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.Schemas {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				(v13Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenAPIComponent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenAPIComponent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenAPIComponent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenAPIComponent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg7(l, v)
}
func easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg8(in *jlexer.Lexer, out *OpenAPI) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "openapi":
			out.OpenAPIVersion = string(in.String())
		case "info":
			(out.Info).UnmarshalEasyJSON(in)
		case "servers":
			if in.IsNull() {
				in.Skip()
				out.Servers = nil
			} else {
				in.Delim('[')
				if out.Servers == nil {
					if !in.IsDelim(']') {
						out.Servers = make([]OpenAPIServer, 0, 2)
					} else {
						out.Servers = []OpenAPIServer{}
					}
				} else {
					out.Servers = (out.Servers)[:0]
				}
				for !in.IsDelim(']') {
					var v14 OpenAPIServer
					(v14).UnmarshalEasyJSON(in)
					out.Servers = append(out.Servers, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "paths":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Paths = make(map[string]OpenAPIPath)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 OpenAPIPath
					(v15).UnmarshalEasyJSON(in)
					(out.Paths)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		case "components":
			if in.IsNull() {
				in.Skip()
				out.Components = nil
			} else {
				in.Delim('[')
				if out.Components == nil {
					if !in.IsDelim(']') {
						out.Components = make([]OpenAPIComponent, 0, 8)
					} else {
						out.Components = []OpenAPIComponent{}
					}
				} else {
					out.Components = (out.Components)[:0]
				}
				for !in.IsDelim(']') {
					var v16 OpenAPIComponent
					(v16).UnmarshalEasyJSON(in)
					out.Components = append(out.Components, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg8(out *jwriter.Writer, in OpenAPI) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"openapi\":"
		out.RawString(prefix[1:])
		out.String(string(in.OpenAPIVersion))
	}
	{
		const prefix string = ",\"info\":"
		out.RawString(prefix)
		(in.Info).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"servers\":"
		out.RawString(prefix)
		if in.Servers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Servers {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"paths\":"
		out.RawString(prefix)
		if in.Paths == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.Paths {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				(v19Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"components\":"
		out.RawString(prefix)
		if in.Components == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Components {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenAPI) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenAPI) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson65eb4bc2EncodeGithubComTimgluzNystrandsPkg8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenAPI) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenAPI) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson65eb4bc2DecodeGithubComTimgluzNystrandsPkg8(l, v)
}
